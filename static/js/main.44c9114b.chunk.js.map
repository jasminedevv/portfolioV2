{"version":3,"sources":["components/SearchExperience.js","components/MarkdownTab.js","App.js","serviceWorker.js","index.js"],"names":["CATEGORIES","ExperienceCards","props","cards","cardData","map","card","tags","tag","Label","key","name","className","title","link","href","header","Card","Content","Header","Meta","meta","Description","description","extra","Group","centered","SearchExperience","handleChangeSearch","event","data","console","log","setState","search_query","target","value","handleChangeCategory","category","state","experiences","fetch","then","response","json","params","results","toLowerCase","filter","result","includes","Object","values","join","searchResults","this","search","categoriesDropdown","text","Grid","columns","Row","stretched","Column","Input","fluid","label","onChange","Dropdown","placeholder","selection","options","classname","React","Component","MarkdownTab","markdownPath","useState","setText","useEffect","Tab","Pane","attached","App","panes","menuItem","render","Container","style","margin","as","menu","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44c9114b.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Input, Card, Label, Grid, Dropdown } from 'semantic-ui-react'\n\n// TODO: summary of my experience with each at the top\nconst CATEGORIES = ['All', 'Python', 'Javascript', 'Bash', 'Linux', 'React']\n\nclass SearchExperience extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      experiences: [],\n      category: 'All',\n      search_query: ''\n    }\n  }\n\n  componentDidMount () {\n    fetch('experiences.json')\n      .then(response => response.json())\n      .then(json => {\n        this.setState({ experiences: json })\n      })\n  }\n\n  handleChangeSearch = (event, data) => {\n    console.log('change search fired')\n    this.setState({ search_query: event.target.value })\n  }\n\n  handleChangeCategory = (event, data) => {\n    this.setState({ category: data.value })\n  }\n\n  // move outside as own function\n  search (params) {\n    console.log('search fired')\n    let results = params.experiences\n    const category = params.category\n    const search_query = params.search_query.toLowerCase()\n\n    if (category !== 'All') {\n      results = results.filter(result => result.tags.includes(category))\n    }\n\n    if (search_query) {\n      results = results.filter(result => {\n        const amalgam = Object.values(result)\n          .join(' ')\n          .toLowerCase()\n        const found = amalgam.includes(search_query)\n        if (found) {\n          return result\n        }\n      })\n    }\n\n    console.log(results)\n    return results\n  }\n\n  render () {\n    console.log('render fired')\n    const searchResults = this.search(this.state)\n\n    const categoriesDropdown = CATEGORIES.map(category => {\n      return {\n        key: category,\n        text: category,\n        value: category\n      }\n    })\n\n    return (\n      <div className='SearchExperience'>\n        {/* SEARCH BAR */}\n        <Grid columns={2}>\n          <Grid.Row stretched>\n            <Grid.Column>\n              <Input fluid label='Search' onChange={this.handleChangeSearch} />\n            </Grid.Column>\n            <Grid.Column>\n              <Dropdown\n                placeholder='Filter'\n                fluid\n                selection\n                options={categoriesDropdown}\n                onChange={this.handleChangeCategory}\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n\n        <br></br>\n        <hr></hr>\n\n        <ExperienceCards cardData={searchResults} classname='pull-right' />\n\n        <h4>I haven't quite finished writing up descriptions for every project. Find more stuff I've done on <a href=\"https://github.com/lacunahag\">Github</a> and <a href=\"https://medium.com/@jasmine.yhumbert\">Medium</a>.</h4>\n\n      </div>\n    )\n  }\n}\n\n// renders\nfunction ExperienceCards (props) {\n  // Props should pass an array of experience objects that looks like:\n\n  const { cardData } = props\n\n  const cards = cardData.map(card => {\n    const tags = card.tags.map(tag => {\n      return (\n        <Label key={tag} name={tag} className={tag}>\n          {tag}\n        </Label>\n      )\n    })\n\n    const title = card.link ? <a href={card.link}>{card.header}</a> : card.header\n\n    return (\n      <Card key={card.header}>\n        <Card.Content>\n          <Card.Header>\n            {title}\n          </Card.Header>\n          <Card.Meta>{card.meta}</Card.Meta>\n          <Card.Description>{card.description}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>{tags}</Card.Content>\n      </Card>\n    )\n  })\n\n  return (\n    <div className='ExperienceCards'>\n      <Card.Group centered>{cards}</Card.Group>\n    </div>\n  )\n}\n\nexport default SearchExperience\n","import React, { useEffect, useState } from 'react';\nimport MDReactComponent from 'markdown-react-js';\nimport { Tab } from 'semantic-ui-react'\n\nconst MarkdownTab = ({ markdownPath }) => {\n  const [ text, setText ] = useState('')\n  \n  // fetch markdown files\n  useEffect(() => {\n    fetch(markdownPath)\n    .then(response => response.text())\n    .then(result => {\n      setText(result)\n    })\n  }, [])\n\n  return (\n    <Tab.Pane attached={false} className=\"MarkdownElement\">\n      <MDReactComponent text={text} />\n    </Tab.Pane>\n  )\n}\n\nexport default MarkdownTab;","import React from 'react';\n\nimport SearchExperience from './components/SearchExperience.js';\nimport MarkdownTab from './components/MarkdownTab.js';\n\nimport { Container, Header, Tab } from 'semantic-ui-react'\n\n// const PARAMS = new URLSearchParams(window.location.search);\n// use like this\n// PARAMS.get('name')\n\nfunction App() {\n  const panes = [\n    {\n      menuItem: 'Contact',\n      render: () => <div><MarkdownTab markdownPath=\"markdown/OtherLinks.md\" /></div>,\n    },\n    {\n      menuItem: 'Search My Experience',\n      render: () => <Tab.Pane attached={false}> <SearchExperience /> </Tab.Pane>,\n    },\n    {\n      menuItem: 'More About Me',\n      render: () => <MarkdownTab markdownPath=\"markdown/AboutMe.md\" />,\n    },\n  ]\n\n  return (\n    <div className=\"App\">\n      <div className=\"bodyContent\">\n        <Container text style={{ margin: '2em' }}>\n          <Header as='h1'>Jasmine Humbert</Header>\n        </Container>\n        <Tab menu={{ text: true }} panes={panes} />\n      </div>\n      <div className=\"footer\">\n        <br></br>\n        <hr></hr>\n        <br></br>\n        <p>View the code for this site <a href=\"https://github.com/lacunahag/portfolioV2\">on Github</a>.</p>\n        <br></br>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}